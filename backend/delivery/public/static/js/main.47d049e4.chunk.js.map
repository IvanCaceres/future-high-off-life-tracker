{"version":3,"sources":["components/future.js","App.js","serviceWorker.js","index.js"],"names":["FutureTracker","useState","leakUrl","setLeakUrl","countdown","setCountdown","pusherRef","useRef","channelRef","timerRef","addZero","inputNumber","useEffect","end","moment","duration","diff","hours","minutes","seconds","current","setInterval","clearInterval","axios","get","then","response","data","Pusher","cluster","subscribe","bind","url","unbind","unsubscribe","disconnect","className","alt","href","App","exact","path","class","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4UAKe,SAASA,IAAiB,IAAD,EACRC,mBAAS,6BADD,mBAC/BC,EAD+B,KACtBC,EADsB,OAEJF,mBAAS,YAFL,mBAE/BG,EAF+B,KAEpBC,EAFoB,KAIhCC,EAAYC,mBACZC,EAAaD,mBACbE,EAAWF,mBACbG,EAAU,SAACC,GACb,OAAOA,EAAc,GAAd,WAAuBA,GAAgBA,GA+DhD,OA5DAC,qBAAU,WACR,IAAIC,EAAMC,IAAO,iBACbC,EAAWD,IAAOC,SAASF,EAAIG,KAAKF,QACpCC,EAAW,GACbV,EACEK,EAAQK,EAASE,SACjB,IACAP,EAAQK,EAASG,WACjB,IACAR,EAAQK,EAASI,YAKrBV,EAASW,QAAUC,aAAY,WAC7B,IAAIN,EAAWD,IAAOC,SAASF,EAAIG,KAAKF,QAgBxC,OAbAT,EACEK,EAAQK,EAASE,SACjB,IACAP,EAAQK,EAASG,WACjB,IACAR,EAAQK,EAASI,YAIfJ,GAAY,IACdO,cAAcb,EAASW,SACvBf,EAAa,0BAER,WACLiB,cAAcb,EAASW,YAExB,OACF,IAEHR,qBAAU,WACRW,IAAMC,IAAI,SAASC,MAAK,SAAUC,GAEhCvB,EAAWuB,EAASC,WAErB,IAGHf,qBAAU,WASR,OARAN,EAAUc,QAAU,IAAIQ,IAAO,uBAAwB,CACrDC,QAAS,QAGXrB,EAAWY,QAAUd,EAAUc,QAAQU,UAAU,cACjDtB,EAAWY,QAAQW,KAAK,YAAY,SAACJ,GACnCxB,EAAWwB,EAAKK,QAEX,WACLxB,EAAWY,QAAQa,SACnB3B,EAAUc,QAAQc,YAAY,cAC9B5B,EAAUc,QAAQe,gBAEnB,CAAC7B,IAEF,oCACE,qDAEE,6BAFF,gBAKA,yBAAK8B,UAAU,WAAWC,IAAI,SAC9B,sEACA,uBAAGD,UAAU,UAAUE,KAAMpC,GAC1BA,GAEH,uBAAGkC,UAAU,WAAb,iBAAoD,0BAAdhC,EAAwC,IAAM,cAApF,IAAoGA,I,MClC3FmC,MA5Cf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,KAChB,iEACA,uBAAGC,MAAM,cAAcJ,KAAK,sCAC1B,yBAAKK,IAAI,qBACT,6BACA,yDAGJ,kBAAC,IAAD,CAAOF,KAAK,sCACV,kBAACzC,EAAD,QAGJ,gFACqD,IACnD,uBAAGsC,KAAK,mCAAR,iBACA,6BAHF,+DAIE,6BAJF,iFAOA,+DAEE,6BACA,uBAAGA,KAAK,gCAAR,yBACA,6BACA,uBAAGA,KAAK,kCAAR,UACA,6BACA,uBAAGA,KAAK,sDAAR,YAGA,6BAVF,2BCvBUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47d049e4.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Pusher from \"pusher-js\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nexport default function FutureTracker() {\n  const [leakUrl, setLeakUrl] = useState(\"https://www.highoff.life/\");\n  const [countdown, setCountdown] = useState(\"00:00:00\");\n\n  const pusherRef = useRef();\n  const channelRef = useRef();\n  const timerRef = useRef();\n  let addZero = (inputNumber) => {\n    return inputNumber < 10 ? `0${inputNumber}` : inputNumber;\n  };\n  // setup countdown timer\n  useEffect(() => {\n    let end = moment('2020-05-15T00');\n    let duration = moment.duration(end.diff(moment()));\n    if (duration > 0) {\n      setCountdown(\n        addZero(duration.hours()) +\n        \":\" +\n        addZero(duration.minutes()) +\n        \":\" +\n        addZero(duration.seconds())\n      );\n    }\n\n    // Update the count down every 1 second\n    timerRef.current = setInterval(function () {\n      let duration = moment.duration(end.diff(moment()));\n\n      // Output the result in an element with id=\"demo\"\n      setCountdown(\n        addZero(duration.hours()) +\n        \":\" +\n        addZero(duration.minutes()) +\n        \":\" +\n        addZero(duration.seconds())\n      );\n\n      // If the count down is over, write some text\n      if (duration <= 0) {\n        clearInterval(timerRef.current);\n        setCountdown(\"the album is out now!\");\n      }\n      return () => {\n        clearInterval(timerRef.current);\n      };\n    }, 1000);\n  }, []);\n  // fetch url on initial load\n  useEffect(() => {\n    axios.get(\"/info\").then(function (response) {\n      // handle success\n      setLeakUrl(response.data);\n    });\n  }, []);\n\n  //realtime url updates\n  useEffect(() => {\n    pusherRef.current = new Pusher(\"bf103ae2e4d0e5a11ed0\", {\n      cluster: \"us2\",\n    });\n\n    channelRef.current = pusherRef.current.subscribe(\"my-channel\");\n    channelRef.current.bind(\"my-event\", (data) => {\n      setLeakUrl(data.url);\n    });\n    return () => {\n      channelRef.current.unbind();\n      pusherRef.current.unsubscribe(\"my-channel\");\n      pusherRef.current.disconnect();\n    };\n  }, [pusherRef]);\n  return (\n    <>\n      <h1>\n        Future - High Off Life\n        <br />\n        Leak Tracker\n      </h1>\n      <div className=\"App-logo\" alt=\"logo\" />\n      <p>HIGH OFF LIFE leaked song available at:</p>\n      <a className=\"leakurl\" href={leakUrl}>\n        {leakUrl}\n      </a>\n      <p className=\"hol-red\">HIGH OFF LIFE {countdown === \"the album is out now!\" ? \" \" : \"releases in\"} {countdown}</p>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport FutureTracker from \"./components/future\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Switch>\n            <Route exact path=\"/\">\n              <h1>Taco Breath Software ðŸŒ®</h1>\n              <a class=\"future-link\" href=\"/future-high-off-life-leak-tracker\">\n                <img src=\"/future-head.jpg\"></img>\n                <br />\n                <span>High Off Life Tracker</span>\n              </a>\n            </Route>\n            <Route path=\"/future-high-off-life-leak-tracker\">\n              <FutureTracker />\n            </Route>\n          </Switch>\n          <p>\n            This application was developed in under an hour by{\" \"}\n            <a href=\"https://twitter.com/IvanCaceres\">@IvanCaceres.</a>\n            <br />A full stack software engineer with 10+ years of experience:\n            <br />\n            C++/Typescript/React/React-Native/PHP/Python/Elixir/Vuejs/Angular/Objective-C\n          </p>\n          <p>\n            Hire me for software development:\n            <br />\n            <a href=\"mailto:ballinuptown@live.com\">ballinuptown@live.com</a>\n            <br />\n            <a href=\"https://github.com/ivancaceres\">github</a>\n            <br />\n            <a href=\"https://www.linkedin.com/in/ivan-caceres-52977896/\">\n              linkedin\n            </a>\n            <br />\n            skype: caceres.ivan\n          </p>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}